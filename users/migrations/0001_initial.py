# Generated by Django 5.2.5 on 2025-08-08 15:26

import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Adresse email')),
                ('firstname', models.CharField(max_length=150, verbose_name='Prénom')),
                ('gender', models.CharField(choices=[('F', 'Féminin'), ('M', 'Masculin')], default='F', help_text='Préférence de genre pour les textes', verbose_name='Genre')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de mise à jour')),
                ('is_active', models.BooleanField(default=True, help_text="Indique si l'utilisateur peut se connecter", verbose_name='Actif')),
                ('is_staff', models.BooleanField(default=False, help_text="Indique si l'utilisateur peut accéder à l'admin", verbose_name='Membre du staff')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur-ice',
                'verbose_name_plural': 'Utilisateur-ices',
                'ordering': ['-created_at'],
            },
        ),
    ]
